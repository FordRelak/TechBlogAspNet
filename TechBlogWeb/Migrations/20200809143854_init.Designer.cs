// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechBlogWeb.Domain;

namespace TechBlogWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200809143854_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3BC4D90C-D7B0-47D7-8387-B1DBDECA82CF",
                            ConcurrencyStamp = "3ad7fcd7-b6ad-4f70-8ab6-e8420aab4a94",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "AD2CC976-21B4-4A15-9F6D-50B51D23F2AC",
                            ConcurrencyStamp = "b3dde91b-25b6-400c-ba30-e0d4418aec56",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4D2CE2C5-2C04-42DA-A47D-1DD4A2010723",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa46187c-0cbf-4bdf-a875-84b20e286643",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBlNbcw/qwmxzassmYMS5lzJwLoG0BdK9I6cuaywzPQLeViw2nPQ74BwQCyiVcZfXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "4D2CE2C5-2C04-42DA-A47D-1DD4A2010723",
                            RoleId = "AD2CC976-21B4-4A15-9F6D-50B51D23F2AC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TechBlogWeb.Domain.Entites.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("088dc525-cb5c-4fe9-baf2-076527b7c7c4"),
                            Author = "testAuthor1",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(1475),
                            NormalizedTag = "Science",
                            SubTitle = "testSub1",
                            Tag = "Science",
                            Text = "testText1",
                            Title = "testTitle1",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("6bc96678-7700-46ae-a711-4c112bd3ee8f"),
                            Author = "testAuthor2",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6803),
                            NormalizedTag = "Science",
                            SubTitle = "testSub2",
                            Tag = "Science",
                            Text = "testText2",
                            Title = "testTitle2",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("2387a96a-fc97-42e8-8ded-d30f229ae20c"),
                            Author = "testAuthor3",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6859),
                            NormalizedTag = "Science",
                            SubTitle = "testSub3",
                            Tag = "Science",
                            Text = "testText3",
                            Title = "testTitle3",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("198cf58c-b097-4f40-8fb5-985cbfe54589"),
                            Author = "testAuthor4",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6866),
                            NormalizedTag = "Science",
                            SubTitle = "testSub4",
                            Tag = "Science",
                            Text = "testText4",
                            Title = "testTitle4",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("d2855081-113b-4c57-8031-25da1a0f8306"),
                            Author = "testAuthor5",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6871),
                            NormalizedTag = "Technology",
                            SubTitle = "testSub5",
                            Tag = "Technology",
                            Text = "testText5",
                            Title = "testTitle5",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("30100c23-0f1e-451b-ac77-79f65c1527a4"),
                            Author = "testAuthor6",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6879),
                            NormalizedTag = "Technology",
                            SubTitle = "testSub6",
                            Tag = "Technology",
                            Text = "testText6",
                            Title = "testTitle6",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("291bc113-7bc1-431a-9ba7-d253d1aa60c8"),
                            Author = "testAuthor7",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6884),
                            NormalizedTag = "Technology",
                            SubTitle = "testSub7",
                            Tag = "Technology",
                            Text = "testText7",
                            Title = "testTitle7",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("218a13eb-b095-4e79-9087-dbc659ee8d5e"),
                            Author = "testAuthor8",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6900),
                            NormalizedTag = "Technology",
                            SubTitle = "testSub8",
                            Tag = "Technology",
                            Text = "testText8",
                            Title = "testTitle8",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("cfa58c39-0b5d-4ef1-9595-058ba88cc1cc"),
                            Author = "testAuthor9",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6905),
                            NormalizedTag = "Worldwide",
                            SubTitle = "testSub9",
                            Tag = "Worldwide",
                            Text = "testText9",
                            Title = "testTitle9",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("b562ccaf-d9e4-4954-9259-b64c54714e71"),
                            Author = "testAuthor10",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6979),
                            NormalizedTag = "Worldwide",
                            SubTitle = "testSub10",
                            Tag = "Worldwide",
                            Text = "testText10",
                            Title = "testTitle10",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("91c2c13f-cc17-4443-a61f-ed0b1c861705"),
                            Author = "testAuthor11",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6986),
                            NormalizedTag = "Worldwide",
                            SubTitle = "testSub11",
                            Tag = "Worldwide",
                            Text = "testText11",
                            Title = "testTitle11",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("7e64829c-0b1c-4d03-9a90-fd51568f4843"),
                            Author = "testAuthor12",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6991),
                            NormalizedTag = "Worldwide",
                            SubTitle = "testSub12",
                            Tag = "Worldwide",
                            Text = "testText12",
                            Title = "testTitle12",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("42f5855d-a7bc-442a-aa4a-f4735453d7ef"),
                            Author = "testAuthor13",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(6996),
                            NormalizedTag = "Car News",
                            SubTitle = "testSub13",
                            Tag = "CarNews",
                            Text = "testText13",
                            Title = "testTitle13",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("f37e48a6-7532-440d-b601-93fbbc1fdd05"),
                            Author = "testAuthor14",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7101),
                            NormalizedTag = "Car News",
                            SubTitle = "testSub14",
                            Tag = "CarNews",
                            Text = "testText14",
                            Title = "testTitle14",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("709a5a7a-13ad-4bf1-bed1-339fcd5f36d6"),
                            Author = "testAuthor15",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7112),
                            NormalizedTag = "Car News",
                            SubTitle = "testSub15",
                            Tag = "CarNews",
                            Text = "testText15",
                            Title = "testTitle15",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("bc1a6d46-f938-4669-9942-2cb85e4addae"),
                            Author = "testAuthor16",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7122),
                            NormalizedTag = "Car News",
                            SubTitle = "testSub16",
                            Tag = "CarNews",
                            Text = "testText16",
                            Title = "testTitle16",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("6010dd64-1d0b-4067-ada3-8ff4af1fd1f6"),
                            Author = "testAuthor17",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7127),
                            NormalizedTag = "Socia lMedia",
                            SubTitle = "testSub17",
                            Tag = "SocialMedia",
                            Text = "testText17",
                            Title = "testTitle17",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("88c928e1-e68e-425e-921a-da7d7d1d45d0"),
                            Author = "testAuthor18",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7135),
                            NormalizedTag = "Socia lMedia",
                            SubTitle = "testSub18",
                            Tag = "SocialMedia",
                            Text = "testText18",
                            Title = "testTitle18",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("744a0dca-e9a8-47b0-8e47-93405fbf2752"),
                            Author = "testAuthor19",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7141),
                            NormalizedTag = "Socia lMedia",
                            SubTitle = "testSub19",
                            Tag = "SocialMedia",
                            Text = "testText19",
                            Title = "testTitle19",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("85daa3b2-9592-425c-9c3f-ce2947aea432"),
                            Author = "testAuthor20",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7146),
                            NormalizedTag = "Socia lMedia",
                            SubTitle = "testSub20",
                            Tag = "SocialMedia",
                            Text = "testText20",
                            Title = "testTitle20",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("256a1923-e9a5-4490-a81c-3d6886ab359c"),
                            Author = "testAuthor21",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7152),
                            NormalizedTag = "Gadgets",
                            SubTitle = "testSub21",
                            Tag = "Gadgets",
                            Text = "testText21",
                            Title = "testTitle21",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("3929f606-a875-47cc-8ef6-ac1ed8bd9f65"),
                            Author = "testAuthor22",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7156),
                            NormalizedTag = "Gadgets",
                            SubTitle = "testSub22",
                            Tag = "Gadgets",
                            Text = "testText22",
                            Title = "testTitle22",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("e1072ed1-b0fd-49a7-94ef-2cdb88daf0bf"),
                            Author = "testAuthor23",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7161),
                            NormalizedTag = "Gadgets",
                            SubTitle = "testSub23",
                            Tag = "Gadgets",
                            Text = "testText23",
                            Title = "testTitle23",
                            TitleImagePath = "tech_menu.jpg"
                        },
                        new
                        {
                            Id = new Guid("57c3aa63-e6eb-4912-9a4b-087072c56fe3"),
                            Author = "testAuthor24",
                            DateTime = new DateTime(2020, 8, 9, 14, 38, 54, 568, DateTimeKind.Utc).AddTicks(7206),
                            NormalizedTag = "Gadgets",
                            SubTitle = "testSub24",
                            Tag = "Gadgets",
                            Text = "testText24",
                            Title = "testTitle24",
                            TitleImagePath = "tech_menu.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
